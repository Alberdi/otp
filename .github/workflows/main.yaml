##
## This workflow handles testing of pull requests and pushes.
## It also publishes some packages to any new Erlang/OTP release
##
## To speed this up it would be nice if one could share docker
## images inbetween different jobs, but at the moment this is
## not possible so we need to rebuild all of Erlang/OTP multiple
## times.
##
## Now that we have migrated to ghcr.io we use the
## built-in caching mechanisms of docker/build-push-action@v2.
## However as things are now we use docker directly to make things
## work due to historical reasons.
##

name: Build and check Erlang/OTP

on:
  push:
  pull_request:
  schedule:
      - cron: 0 1 * * *

env:
    ## Equivalent to github.event_name == 'pull_request' ? github.base_ref : github.ref_name
    BASE_BRANCH: ${{ github.event_name == 'pull_request' && github.base_ref || github.ref_name }}

jobs:

  pack:
    name: Build Erlang/OTP (64-bit)
    runs-on: ubuntu-latest
    outputs:
        BASE_BUILD: ${{ steps.base-build.outputs.BASE_BUILD }}
        changes: ${{ steps.changes.outputs.changes }}
        all: ${{ steps.apps.outputs.all }}
    steps:
      - uses: actions/checkout@v4.1.0
      - uses: ./.github/actions/build-base-image
        with:
            BASE_BRANCH: ${{ env.BASE_BRANCH }}
            BUILD_IMAGE: false
      - name: Get applications
        id: apps
        run: |
          .github/scripts/path-filters.sh > .github/scripts/path-filters.yaml
          ## Print path-filters for debug purposes
          cat .github/scripts/path-filters.yaml
          ALL_APPS=$(grep '^[a-z_]*:' .github/scripts/path-filters.yaml | sed 's/:.*$//')
          ALL_APPS=$(jq -n --arg inarr "${ALL_APPS}" '$inarr | split("\n")' | tr '\n' ' ')
          echo "all=${ALL_APPS}" >> $GITHUB_OUTPUT
      - uses: dorny/paths-filter@v2.11.1
        id: app-changes
        with:
          filters: .github/scripts/path-filters.yaml
      - name: Override changes
        id: changes
        env:
            ALL_APPS: ${{ steps.apps.outputs.all }}
            CHANGED_APPS: ${{ steps.app-changes.outputs.changes }}
        run: |
          if ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'full-build-and-check') }} || ${{ github.event_name == 'schedule' }}; then
              echo "changes=${ALL_APPS}" >> "$GITHUB_OUTPUT"
          else
              echo "changes=${CHANGED_APPS}" >> "$GITHUB_OUTPUT"
          fi
      - name: Create initial pre-release tar
        run: .github/scripts/init-pre-release.sh otp_archive.tar.gz
      - name: Upload source tar archive
        uses: actions/upload-artifact@v3.1.3
        with:
          name: otp_git_archive
          path: otp_archive.tar.gz
      - name: Cache pre-built tar archives
        id: pre-built-cache
        uses: actions/cache@v3.3.2
        with:
            path: |
                otp_src.tar.gz
                otp_cache.tar.gz
            key: prebuilt-${{ github.ref_name }}-${{ github.sha }}
            restore-keys: |
                prebuilt-${{ github.base_ref }}-${{ github.event.pull_request.base.sha }}
      - uses: dorny/paths-filter@v2.11.1
        id: cache
        with:
          filters: |
              no-cache:
                  - '.github/**'
              deleted:
                  - deleted: '**'
              bootstrap:
                  - 'bootstrap/**'
              configure:
                  - '**.ac'
                  - '**.in'
          list-files: shell
      - name: Restore from cache
        env:
            NO_CACHE: ${{ steps.cache.outputs.no-cache }}
            BOOTSTRAP: ${{ steps.cache.outputs.bootstrap }}
            CONFIGURE: ${{ steps.cache.outputs.configure }}
        run: |
            .github/scripts/restore-from-prebuilt.sh "`pwd`" \
              "`pwd`/.github/otp.tar.gz" \
              "`pwd`/otp_archive.tar.gz" \
              '${{ github.event_name }}' \
              '${{ steps.cache.outputs.deleted_files }}' \
              '${{ steps.changes.outputs.changes }}'
      - name: Upload restored cache
        uses: actions/upload-artifact@v3.1.3
        if: runner.debug == 1
        with:
          name: restored-cache
          path: .github/otp.tar.gz
      - name: Build image
        run: |
          docker build --tag otp \
            --build-arg MAKEFLAGS=-j$(($(nproc) + 2)) \
            --file ".github/dockerfiles/Dockerfile.64-bit" \
            .github/
      - name: Build pre-built tar archives
        run: |
          docker run -v $PWD:/github --entrypoint "" otp \
            scripts/build-otp-tar -o /github/otp_clean_src.tar.gz /github/otp_src.tar.gz -b /buildroot/otp/ /github/otp_src.tar.gz
      - name: Build cache
        run: |
          if [ -f otp_cache.tar.gz ]; then
            gunzip otp_cache.tar.gz
          else
            docker run -v $PWD:/github --entrypoint "" otp \
              bash -c 'cp ../otp_cache.tar /github/'
          fi
          docker run -v $PWD:/github --entrypoint "" otp \
            bash -c 'set -x; C_APPS=$(ls -d ./lib/*/c_src); find Makefile ./make ./erts ./bin/`erts/autoconf/config.guess` ./lib/erl_interface ./lib/jinterface ${C_APPS} `echo "${C_APPS}" | sed -e 's:c_src$:priv:'` -type f -newer README.md \! -name "*.beam" \! -path "*/doc/*" | xargs tar --transform "s:^./:otp/:" -uvf /github/otp_cache.tar'
          gzip otp_cache.tar
      - name: Upload pre-built tar archive
        uses: actions/upload-artifact@v3.1.3
        with:
          name: otp_prebuilt
          path: |
              otp_src.tar.gz
              otp_cache.tar.gz

  build-macos:
    name: Build Erlang/OTP (macOS)
    runs-on: macos-12
    needs: pack
    env:
      WXWIDGETS_VERSION: 3.1.5
    steps:
      - uses: actions/checkout@v4.1.0

      - name: Download source archive
        uses: actions/download-artifact@v3.0.2
        with:
          name: otp_prebuilt

      - name: Cache wxWidgets
        id: wxwidgets-cache
        uses: actions/cache@v3.3.2
        with:
          path: wxWidgets
          key: wxWidgets-${{ env.WXWIDGETS_VERSION }}-${{ runner.os }}-12

      - name: Compile wxWidgets
        if: steps.wxwidgets-cache.outputs.cache-hit != 'true'
        run: .github/scripts/build-macos-wxwidgets.sh

      - name: Compile Erlang
        run: |
          tar -xzf ./otp_src.tar.gz
          export PATH=$PWD/wxWidgets/release/bin:$PATH
          cd otp
          $GITHUB_WORKSPACE/.github/scripts/build-macos.sh build_docs --disable-dynamic-ssl-lib
          tar -czf otp_macos_$(cat OTP_VERSION)_x86-64.tar.gz -C release .

      - name: Test Erlang
        run: |
          cd otp/release
          ./Install -sasl $PWD
          ./bin/erl -noshell -eval 'io:format("~s", [erlang:system_info(system_version)]), halt().'
          ./bin/erl -noshell -eval 'ok = crypto:start(), io:format("crypto ok~n"), halt().'
          ./bin/erl -noshell -eval '{wx_ref,_,_,_} = wx:new(), io:format("wx ok~n"), halt().'

      - name: Upload tarball
        uses: actions/upload-artifact@v3.1.3
        with:
          name: otp_prebuilt_macos_x86-64
          path: otp/otp_macos_*_x86-64.tar.gz

  build-windows:
    defaults:
      run:
        shell: wsl-bash {0}
    env:
      WXWIDGETS_VERSION: 3.1.4
    name: Build Erlang/OTP (Windows)
    runs-on: windows-2022
    needs: pack
    steps:
      - uses: Vampire/setup-wsl@v2.0.1
        with:
          distribution: Ubuntu-18.04

      - name: Install WSL dependencies
        run: apt update && apt install -y g++-mingw-w64 gcc-mingw-w64 make autoconf unzip

      - name: Install openssl
        shell: cmd
        run: |
          choco install openssl --version=1.1.1.2100
          IF EXIST "c:\\Program Files\\OpenSSL-Win64" (move "c:\\Program Files\\OpenSSL-Win64" "c:\\OpenSSL-Win64") ELSE (move "c:\\Program Files\\OpenSSL" "c:\\OpenSSL-Win64")

      - name: Cache wxWidgets
        uses: actions/cache@v3.3.2
        with:
          path: wxWidgets
          key: wxWidgets-${{ env.WXWIDGETS_VERSION }}-${{ runner.os }}

      # actions/cache on Windows sometimes does not set cache-hit even though there was one. Setting it manually.
      - name: Set wxWidgets cache
        id: wxwidgets-cache
        env:
          WSLENV: GITHUB_OUTPUT/p
        run: |
          if [ -d wxWidgets ]; then
            echo "cache-hit=true" >> $GITHUB_OUTPUT
          else
            echo "cache-hit=false" >> $GITHUB_OUTPUT
          fi

      - name: Download wxWidgets
        if: steps.wxwidgets-cache.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/wxWidgets/wxWidgets/releases/download/v${{ env.WXWIDGETS_VERSION }}/wxWidgets-${{ env.WXWIDGETS_VERSION }}.zip
          unzip wxWidgets-${{ env.WXWIDGETS_VERSION }}.zip -d wxWidgets
          sed -i -r -e 's/wxUSE_POSTSCRIPT +0/wxUSE_POSTSCRIPT 1/' wxWidgets/include/wx/msw/setup.h
          sed -i -r -e 's/wxUSE_WEBVIEW_EDGE +0/wxUSE_WEBVIEW_EDGE 1/' wxWidgets/include/wx/msw/setup.h

      - name: Install WebView2
        if: steps.wxwidgets-cache.outputs.cache-hit != 'true'
        shell: cmd
        run: |
          cd wxWidgets\\3rdparty
          nuget install Microsoft.Web.WebView2 -Version 1.0.705.50 -Source https://api.nuget.org/v3/index.json
          rename Microsoft.Web.WebView2.1.0.705.50 webview2

      - name: Build wxWidgets
        if: steps.wxwidgets-cache.outputs.cache-hit != 'true'
        shell: cmd
        run: |
          cd wxWidgets\\build\\msw
          call "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\Auxiliary\\Build\\vcvars64.bat"
          nmake TARGET_CPU=amd64 BUILD=release SHARED=0 DIR_SUFFIX_CPU= -f makefile.vc

      - name: Download source archive
        uses: actions/download-artifact@v3.0.2
        with:
          name: otp_prebuilt

      - name: Compile Erlang
        run: |
          mkdir -p /mnt/c/opt/local64/pgm/
          cp -R wxWidgets /mnt/c/opt/local64/pgm/wxWidgets-${{ env.WXWIDGETS_VERSION }}
          tar -xzf ./otp_src.tar.gz
          cd otp
          export ERL_TOP=`pwd`
          export MAKEFLAGS=-j$(($(nproc) + 2))
          export ERLC_USE_SERVER=true
          export ERTS_SKIP_DEPEND=true
          eval `./otp_build env_win32 x64`
          ./otp_build configure
          if cat erts/CONF_INFO ||
             grep -v "Static linking with OpenSSL 3.0" lib/*/CONF_INFO ||
             cat lib/*/SKIP ||
             cat lib/SKIP-APPLICATIONS; then
             exit 1
          fi
          ./otp_build boot -a
          ./otp_build release -a
          cp /mnt/c/opt/local64/pgm/wxWidgets-${{ env.WXWIDGETS_VERSION }}/3rdparty/webview2/runtimes/win-x64/native/WebView2Loader.dll $ERL_TOP/release/win32/erts-*/bin/
          ./otp_build installer_win32

      - name: Upload installer
        uses: actions/upload-artifact@v3.1.3
        with:
          name: otp_win32_installer
          path: otp/release/win32/otp*.exe

  build:
    name: Build Erlang/OTP
    runs-on: ubuntu-latest
    needs: pack

    strategy:
      matrix:
        type: [32-bit,cross-compile,clang]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4.1.0
      - uses: ./.github/actions/build-base-image
        with:
            BASE_BRANCH: ${{ env.BASE_BRANCH }}
            TYPE: ${{ matrix.type }}
      - name: Download source archive
        uses: actions/download-artifact@v3.0.2
        with:
          name: otp_prebuilt
      - name: Build ${{ matrix.type }} image
        run: |
          mv otp_src.tar.gz .github/otp.tar.gz
          docker build --tag otp --file .github/dockerfiles/Dockerfile.${{ matrix.type }} \
            .github

  documentation:
    name: Build and check documentation
    runs-on: ubuntu-latest
    needs: pack
    steps:
      - uses: actions/checkout@v4.1.0
      - uses: ./.github/actions/build-base-image
        with:
            BASE_BRANCH: ${{ env.BASE_BRANCH }}

      ## Build all the documentation
      - name: Build documentation
        run: |
          docker build -t otp - <<EOF
          FROM otp
          RUN make release docs release_docs && sudo make install-docs
          EOF
      - name: Release docs to publish
        run: |
          docker run -v $PWD/:/github otp \
            "make release_docs DOC_TARGETS='man html pdf' RELEASE_ROOT=/github/docs"
            sudo chown -R `whoami` docs
            cd docs
            tar czf ../otp_doc_man.tar.gz man
            rm -rf man
            tar czf ../otp_doc_html.tar.gz *
      - name: Upload html documentation archive
        uses: actions/upload-artifact@v3.1.3
        with:
          name: otp_doc_html
          path: otp_doc_html.tar.gz
      - name: Upload man documentation archive
        uses: actions/upload-artifact@v3.1.3
        with:
          name: otp_doc_man
          path: otp_doc_man.tar.gz
      ## Documentation checks
      - name: Run xmllint
        run: docker run otp "make xmllint"
      - name: Run html link check
        run: docker run -v $PWD/:/github otp "/github/scripts/otp_html_check /github/docs doc/index.html"

  static:
    name: Run static analysis
    runs-on: ubuntu-latest
    needs: pack
    steps:
      - uses: actions/checkout@v4.1.0
      - uses: ./.github/actions/build-base-image
        with:
            BASE_BRANCH: ${{ env.BASE_BRANCH }}
      - name: Install clang-format
        run: |
          docker build -t otp - <<EOF
          FROM otp
          RUN sudo apt-get install -y clang-format
          EOF
        ## Check formatting of cpp code
      - name: Check format
        run: docker run otp "make format-check"
        ## Run dialyzer
      - name: Run dialyzer
        run: docker run -v $PWD/:/github otp '/github/scripts/run-dialyzer'

  ## If this is a tag that has been pushed we do some release work
  release:
    name: Release Erlang/OTP
    runs-on: ubuntu-latest
    needs: documentation
    if: startsWith(github.ref, 'refs/tags/') && github.repository == 'erlang/otp'
    steps:
      ## This step outputs the tag name and whether the tag is a release or patch
      ## (all releases have only two version identifiers, while patches have three
      ##  or more)
      - name: Get Tag Name
        id: tag
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VSN=${TAG#OTP-}
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "vsn=${VSN}" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4.1.0

      ## Publish the pre-built archive and docs
      - name: Download source archive
        uses: actions/download-artifact@v3.0.2
        with:
          name: otp_prebuilt
      - name: Download html docs
        uses: actions/download-artifact@v3.0.2
        with:
          name: otp_doc_html
      - name: Download man docs
        uses: actions/download-artifact@v3.0.2
        with:
          name: otp_doc_man

      ## We add the correct version name into the file names
      ## and create the hash files for all assets
      - name: Create pre-build and doc archives
        run: .github/scripts/create-artifacts.sh artifacts ${{ steps.tag.outputs.tag }}

      ## Create hash files
      - name: Create pre-build and doc archives
        run: |
          shopt -s nullglob
          cd artifacts
          FILES=$(ls {*.tar.gz,*.txt})
          md5sum $FILES > MD5.txt
          sha256sum $FILES > SHA256.txt

      - name: Upload pre-built and doc tar archives
        uses: softprops/action-gh-release@v1
        with:
          name: OTP ${{ steps.tag.outputs.vsn }}
          files: |
            artifacts/*.tar.gz
            artifacts/*.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Deploy on erlang.org
        env:
          GITHUB_TOKEN: ${{ secrets.TRIGGER_ERLANG_ORG_BUILD }}
        run: |
          curl -H "Authorization: token ${GITHUB_TOKEN}" -X POST -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/erlang/erlang-org/actions/workflows/update-gh-cache.yaml/dispatches" -d '{"ref":"master"}'

  event_file:
    name: "Event File"
    runs-on: ubuntu-latest
    steps:
      - name: Upload
        uses: actions/upload-artifact@v3.1.3
        with:
          name: Event File
          path: ${{ github.event_path }}
